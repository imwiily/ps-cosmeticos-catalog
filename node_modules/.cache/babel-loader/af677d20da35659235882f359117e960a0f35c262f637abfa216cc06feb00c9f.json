{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\n// src/hooks/useApi.js\nimport { useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\n// Hook para produtos\nexport const useProdutos = (categoria = 'Todos', page = 0, size = 12) => {\n  _s();\n  const [produtos, setProdutos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pageInfo, setPageInfo] = useState({});\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        console.log('Fetching produtos for categoria:', categoria); // Debug\n\n        let response;\n        if (categoria === 'Todos' || !categoria) {\n          response = await apiService.getProdutos(page, size);\n          console.log('Raw API response:', response); // Debug\n        } else {\n          response = await apiService.getProdutosPorCategoria(categoria, page, size);\n        }\n        if (!response || !response.content) {\n          console.warn('API response is empty or malformed:', response);\n          setProdutos([]);\n          setPageInfo({});\n          return;\n        }\n        const produtosTransformados = response.content.map(produto => {\n          const transformed = apiService.transformProdutoData(produto);\n          console.log('Transformed produto:', transformed); // Debug\n          return transformed;\n        });\n        console.log('Final produtos array:', produtosTransformados); // Debug\n        setProdutos(produtosTransformados);\n        setPageInfo(response.page || {});\n      } catch (err) {\n        console.error('Detailed error loading produtos:', err);\n        setError(`Erro ao carregar produtos: ${err.message}`);\n\n        // Se houver erro, tentar dados de fallback para debug\n        const fallbackData = [{\n          id: 1,\n          nome: \"Produto Teste\",\n          categoria: \"Teste\",\n          preco: \"R$ 99,90\",\n          descricao: \"Produto de teste para verificar a interface\",\n          imagem: null,\n          rating: 4.5,\n          avaliacoes: 10,\n          tags: [\"Teste\"]\n        }];\n        setProdutos(fallbackData);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProdutos();\n  }, [categoria, page, size]);\n  return {\n    produtos,\n    loading,\n    error,\n    pageInfo\n  };\n};\n\n// Hook para categorias\n_s(useProdutos, \"x75w4glO3gbfh2pDKBIutyVrsTU=\");\nexport const useCategorias = () => {\n  _s2();\n  const [categorias, setCategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchCategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await apiService.getCategorias();\n        const categoriasTransformadas = response.map(categoria => apiService.transformCategoriaData(categoria));\n\n        // Só adicionar categoria \"Todos\" se houver mais de uma categoria\n        if (categoriasTransformadas.length > 1) {\n          const categoriasComTodos = [{\n            id: 0,\n            nome: 'Todos',\n            slug: 'todos',\n            descricao: 'Todos os produtos',\n            imagem: null,\n            totalProdutos: 0,\n            ativo: true\n          }, ...categoriasTransformadas];\n          setCategorias(categoriasComTodos);\n        } else {\n          setCategorias(categoriasTransformadas);\n        }\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar categorias:', err);\n\n        // Fallback: se não conseguir carregar categorias, criar uma categoria padrão\n        setCategorias([{\n          id: 1,\n          nome: 'Produtos',\n          slug: 'produtos',\n          descricao: 'Todos os nossos produtos',\n          imagem: null,\n          totalProdutos: 0,\n          ativo: true\n        }]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCategorias();\n  }, []);\n  return {\n    categorias,\n    loading,\n    error\n  };\n};\n\n// Hook para produto individual\n_s2(useCategorias, \"OVUDlO10Yna0opnq7SUeW9B/05o=\");\nexport const useProduto = id => {\n  _s3();\n  const [produto, setProduto] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProduto = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await apiService.getProdutoPorId(id);\n        const produtoTransformado = apiService.transformProdutoData(response);\n        setProduto(produtoTransformado);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produto:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProduto();\n  }, [id]);\n  return {\n    produto,\n    loading,\n    error\n  };\n};\n\n// Hook para produtos relacionados\n_s3(useProduto, \"1jq+PE8ljhf3Fs+01AhmLoIJrhI=\");\nexport const useProdutosRelacionados = id => {\n  _s4();\n  const [produtosRelacionados, setProdutosRelacionados] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProdutosRelacionados = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await apiService.getProdutosRelacionados(id);\n        const produtosTransformados = response.content.map(produto => apiService.transformProdutoData(produto));\n        setProdutosRelacionados(produtosTransformados);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produtos relacionados:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProdutosRelacionados();\n  }, [id]);\n  return {\n    produtosRelacionados,\n    loading,\n    error\n  };\n};\n\n// Hook para subcategorias\n_s4(useProdutosRelacionados, \"cbhlPgr2QUjs0+GuDEiLISdwk6Q=\");\nexport const useSubcategorias = (categoriaId = null) => {\n  _s5();\n  const [subcategorias, setSubcategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchSubcategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        let response;\n        if (categoriaId) {\n          response = await apiService.getSubcategoriasPorCategoria(categoriaId);\n        } else {\n          response = await apiService.getSubcategorias();\n        }\n        setSubcategorias(response);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar subcategorias:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSubcategorias();\n  }, [categoriaId]);\n  return {\n    subcategorias,\n    loading,\n    error\n  };\n};\n\n// Hook genérico para refetch de dados\n_s5(useSubcategorias, \"5NLAqADL4ih62jcdTwH1NR7UDnQ=\");\nexport const useRefetch = () => {\n  _s6();\n  const [isRefetching, setIsRefetching] = useState(false);\n  const refetch = async fetchFunction => {\n    try {\n      setIsRefetching(true);\n      await fetchFunction();\n    } catch (error) {\n      console.error('Erro ao recarregar dados:', error);\n      throw error;\n    } finally {\n      setIsRefetching(false);\n    }\n  };\n  return {\n    refetch,\n    isRefetching\n  };\n};\n_s6(useRefetch, \"UVj7D+W0yqWnuH8+HtGwAl4CDFg=\");","map":{"version":3,"names":["useState","useEffect","apiService","useProdutos","categoria","page","size","_s","produtos","setProdutos","loading","setLoading","error","setError","pageInfo","setPageInfo","fetchProdutos","console","log","response","getProdutos","getProdutosPorCategoria","content","warn","produtosTransformados","map","produto","transformed","transformProdutoData","err","message","fallbackData","id","nome","preco","descricao","imagem","rating","avaliacoes","tags","useCategorias","_s2","categorias","setCategorias","fetchCategorias","getCategorias","categoriasTransformadas","transformCategoriaData","length","categoriasComTodos","slug","totalProdutos","ativo","useProduto","_s3","setProduto","fetchProduto","getProdutoPorId","produtoTransformado","useProdutosRelacionados","_s4","produtosRelacionados","setProdutosRelacionados","fetchProdutosRelacionados","getProdutosRelacionados","useSubcategorias","categoriaId","_s5","subcategorias","setSubcategorias","fetchSubcategorias","getSubcategoriasPorCategoria","getSubcategorias","useRefetch","_s6","isRefetching","setIsRefetching","refetch","fetchFunction"],"sources":["/Users/wiily/Personal Projects/Orders/PS Cosmeticos/Front-end/ps-cosmeticos/src/hooks/useApi.js"],"sourcesContent":["// src/hooks/useApi.js\nimport { useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\n// Hook para produtos\nexport const useProdutos = (categoria = 'Todos', page = 0, size = 12) => {\n  const [produtos, setProdutos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pageInfo, setPageInfo] = useState({});\n\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        console.log('Fetching produtos for categoria:', categoria); // Debug\n        \n        let response;\n        if (categoria === 'Todos' || !categoria) {\n          response = await apiService.getProdutos(page, size);\n          console.log('Raw API response:', response); // Debug\n        } else {\n          response = await apiService.getProdutosPorCategoria(categoria, page, size);\n        }\n\n        if (!response || !response.content) {\n          console.warn('API response is empty or malformed:', response);\n          setProdutos([]);\n          setPageInfo({});\n          return;\n        }\n\n        const produtosTransformados = response.content.map(produto => {\n          const transformed = apiService.transformProdutoData(produto);\n          console.log('Transformed produto:', transformed); // Debug\n          return transformed;\n        });\n\n        console.log('Final produtos array:', produtosTransformados); // Debug\n        setProdutos(produtosTransformados);\n        setPageInfo(response.page || {});\n        \n      } catch (err) {\n        console.error('Detailed error loading produtos:', err);\n        setError(`Erro ao carregar produtos: ${err.message}`);\n        \n        // Se houver erro, tentar dados de fallback para debug\n        const fallbackData = [\n          {\n            id: 1,\n            nome: \"Produto Teste\",\n            categoria: \"Teste\",\n            preco: \"R$ 99,90\",\n            descricao: \"Produto de teste para verificar a interface\",\n            imagem: null,\n            rating: 4.5,\n            avaliacoes: 10,\n            tags: [\"Teste\"]\n          }\n        ];\n        setProdutos(fallbackData);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProdutos();\n  }, [categoria, page, size]);\n\n  return { produtos, loading, error, pageInfo };\n};\n\n// Hook para categorias\nexport const useCategorias = () => {\n  const [categorias, setCategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await apiService.getCategorias();\n        const categoriasTransformadas = response.map(categoria =>\n          apiService.transformCategoriaData(categoria)\n        );\n\n        // Só adicionar categoria \"Todos\" se houver mais de uma categoria\n        if (categoriasTransformadas.length > 1) {\n          const categoriasComTodos = [\n            {\n              id: 0,\n              nome: 'Todos',\n              slug: 'todos',\n              descricao: 'Todos os produtos',\n              imagem: null,\n              totalProdutos: 0,\n              ativo: true\n            },\n            ...categoriasTransformadas\n          ];\n          setCategorias(categoriasComTodos);\n        } else {\n          setCategorias(categoriasTransformadas);\n        }\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar categorias:', err);\n        \n        // Fallback: se não conseguir carregar categorias, criar uma categoria padrão\n        setCategorias([{\n          id: 1,\n          nome: 'Produtos',\n          slug: 'produtos',\n          descricao: 'Todos os nossos produtos',\n          imagem: null,\n          totalProdutos: 0,\n          ativo: true\n        }]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCategorias();\n  }, []);\n\n  return { categorias, loading, error };\n};\n\n// Hook para produto individual\nexport const useProduto = (id) => {\n  const [produto, setProduto] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchProduto = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await apiService.getProdutoPorId(id);\n        const produtoTransformado = apiService.transformProdutoData(response);\n        \n        setProduto(produtoTransformado);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produto:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProduto();\n  }, [id]);\n\n  return { produto, loading, error };\n};\n\n// Hook para produtos relacionados\nexport const useProdutosRelacionados = (id) => {\n  const [produtosRelacionados, setProdutosRelacionados] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchProdutosRelacionados = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await apiService.getProdutosRelacionados(id);\n        const produtosTransformados = response.content.map(produto =>\n          apiService.transformProdutoData(produto)\n        );\n        \n        setProdutosRelacionados(produtosTransformados);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produtos relacionados:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProdutosRelacionados();\n  }, [id]);\n\n  return { produtosRelacionados, loading, error };\n};\n\n// Hook para subcategorias\nexport const useSubcategorias = (categoriaId = null) => {\n  const [subcategorias, setSubcategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchSubcategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        let response;\n        if (categoriaId) {\n          response = await apiService.getSubcategoriasPorCategoria(categoriaId);\n        } else {\n          response = await apiService.getSubcategorias();\n        }\n        \n        setSubcategorias(response);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar subcategorias:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSubcategorias();\n  }, [categoriaId]);\n\n  return { subcategorias, loading, error };\n};\n\n// Hook genérico para refetch de dados\nexport const useRefetch = () => {\n  const [isRefetching, setIsRefetching] = useState(false);\n\n  const refetch = async (fetchFunction) => {\n    try {\n      setIsRefetching(true);\n      await fetchFunction();\n    } catch (error) {\n      console.error('Erro ao recarregar dados:', error);\n      throw error;\n    } finally {\n      setIsRefetching(false);\n    }\n  };\n\n  return { refetch, isRefetching };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}