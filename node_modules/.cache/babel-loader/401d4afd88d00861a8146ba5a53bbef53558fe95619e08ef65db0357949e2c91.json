{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\n// src/hooks/useApi.js\nimport { useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\n// Hook para produtos com suporte a subcategorias\nexport const useProdutos = (categoria = 'Todos', subcategoria = 'Todas', page = 0, size = 12) => {\n  _s();\n  const [produtos, setProdutos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pageInfo, setPageInfo] = useState({});\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        let response;\n        if (categoria === 'Todos' && subcategoria === 'Todas') {\n          response = await apiService.getProdutos(page, size);\n        } else if (categoria !== 'Todos' && subcategoria === 'Todas') {\n          response = await apiService.getProdutosPorCategoria(categoria, page, size);\n        } else if (subcategoria !== 'Todas') {\n          response = await apiService.getProdutosPorSubcategoria(categoria, subcategoria, page, size);\n        } else {\n          response = await apiService.getProdutosPorCategoria(categoria, page, size);\n        }\n        const produtosTransformados = response.content.map(produto => apiService.transformProdutoData(produto)).filter(produto => produto !== null); // Remove produtos null/inválidos\n\n        setProdutos(produtosTransformados);\n        setPageInfo(response.page);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produtos:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProdutos();\n  }, [categoria, subcategoria, page, size]);\n  return {\n    produtos,\n    loading,\n    error,\n    pageInfo\n  };\n};\n\n// Hook para categorias\n_s(useProdutos, \"x75w4glO3gbfh2pDKBIutyVrsTU=\");\nexport const useCategorias = () => {\n  _s2();\n  const [categorias, setCategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchCategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await apiService.getCategorias();\n        const categoriasTransformadas = response.map(categoria => apiService.transformCategoriaData(categoria));\n\n        // Adicionar categoria \"Todos\" no início\n        const categoriasComTodos = [{\n          id: 0,\n          nome: 'Todos',\n          slug: 'todos',\n          descricao: 'Todos os produtos',\n          imagem: null,\n          totalProdutos: 0,\n          ativo: true\n        }, ...categoriasTransformadas];\n        setCategorias(categoriasComTodos);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar categorias:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCategorias();\n  }, []);\n  return {\n    categorias,\n    loading,\n    error\n  };\n};\n\n// Hook para produto individual\n_s2(useCategorias, \"OVUDlO10Yna0opnq7SUeW9B/05o=\");\nexport const useProduto = id => {\n  _s3();\n  const [produto, setProduto] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProduto = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await apiService.getProdutoPorId(id);\n        const produtoTransformado = apiService.transformProdutoData(response);\n        setProduto(produtoTransformado);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produto:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProduto();\n  }, [id]);\n  return {\n    produto,\n    loading,\n    error\n  };\n};\n\n// Hook para produtos relacionados\n_s3(useProduto, \"1jq+PE8ljhf3Fs+01AhmLoIJrhI=\");\nexport const useProdutosRelacionados = id => {\n  _s4();\n  const [produtosRelacionados, setProdutosRelacionados] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProdutosRelacionados = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await apiService.getProdutosRelacionados(id);\n        const produtosTransformados = response.content.map(produto => apiService.transformProdutoData(produto));\n        setProdutosRelacionados(produtosTransformados);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produtos relacionados:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProdutosRelacionados();\n  }, [id]);\n  return {\n    produtosRelacionados,\n    loading,\n    error\n  };\n};\n\n// Hook para subcategorias\n_s4(useProdutosRelacionados, \"cbhlPgr2QUjs0+GuDEiLISdwk6Q=\");\nexport const useSubcategorias = (categoriaId = null) => {\n  _s5();\n  const [subcategorias, setSubcategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchSubcategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        let response;\n        if (categoriaId) {\n          response = await apiService.getSubcategoriasPorCategoria(categoriaId);\n        } else {\n          response = await apiService.getSubcategorias();\n        }\n\n        // Transformar os dados das subcategorias\n        const subcategoriasTransformadas = response.map(subcategoria => {\n          var _subcategoria$categor, _subcategoria$categor2;\n          return {\n            id: subcategoria.id,\n            nome: subcategoria.nome || subcategoria.name,\n            categoria: ((_subcategoria$categor = subcategoria.categoria) === null || _subcategoria$categor === void 0 ? void 0 : _subcategoria$categor.nome) || ((_subcategoria$categor2 = subcategoria.category) === null || _subcategoria$categor2 === void 0 ? void 0 : _subcategoria$categor2.nome),\n            slug: subcategoria.slug,\n            descricao: subcategoria.descricao || subcategoria.description,\n            ativo: subcategoria.ativo !== undefined ? subcategoria.ativo : subcategoria.active\n          };\n        });\n        setSubcategorias(subcategoriasTransformadas);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar subcategorias:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSubcategorias();\n  }, [categoriaId]);\n  return {\n    subcategorias,\n    loading,\n    error\n  };\n};\n\n// Hook genérico para refetch de dados\n_s5(useSubcategorias, \"5NLAqADL4ih62jcdTwH1NR7UDnQ=\");\nexport const useRefetch = () => {\n  _s6();\n  const [isRefetching, setIsRefetching] = useState(false);\n  const refetch = async fetchFunction => {\n    try {\n      setIsRefetching(true);\n      await fetchFunction();\n    } catch (error) {\n      console.error('Erro ao recarregar dados:', error);\n      throw error;\n    } finally {\n      setIsRefetching(false);\n    }\n  };\n  return {\n    refetch,\n    isRefetching\n  };\n};\n_s6(useRefetch, \"UVj7D+W0yqWnuH8+HtGwAl4CDFg=\");","map":{"version":3,"names":["useState","useEffect","apiService","useProdutos","categoria","subcategoria","page","size","_s","produtos","setProdutos","loading","setLoading","error","setError","pageInfo","setPageInfo","fetchProdutos","response","getProdutos","getProdutosPorCategoria","getProdutosPorSubcategoria","produtosTransformados","content","map","produto","transformProdutoData","filter","err","message","console","useCategorias","_s2","categorias","setCategorias","fetchCategorias","getCategorias","categoriasTransformadas","transformCategoriaData","categoriasComTodos","id","nome","slug","descricao","imagem","totalProdutos","ativo","useProduto","_s3","setProduto","fetchProduto","getProdutoPorId","produtoTransformado","useProdutosRelacionados","_s4","produtosRelacionados","setProdutosRelacionados","fetchProdutosRelacionados","getProdutosRelacionados","useSubcategorias","categoriaId","_s5","subcategorias","setSubcategorias","fetchSubcategorias","getSubcategoriasPorCategoria","getSubcategorias","subcategoriasTransformadas","_subcategoria$categor","_subcategoria$categor2","name","category","description","undefined","active","useRefetch","_s6","isRefetching","setIsRefetching","refetch","fetchFunction"],"sources":["/Users/wiily/Personal Projects/Orders/PS Cosmeticos/Front-end/ps-cosmeticos/src/hooks/useApi.js"],"sourcesContent":["// src/hooks/useApi.js\nimport { useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\n// Hook para produtos com suporte a subcategorias\nexport const useProdutos = (categoria = 'Todos', subcategoria = 'Todas', page = 0, size = 12) => {\n  const [produtos, setProdutos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pageInfo, setPageInfo] = useState({});\n\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        let response;\n        if (categoria === 'Todos' && subcategoria === 'Todas') {\n          response = await apiService.getProdutos(page, size);\n        } else if (categoria !== 'Todos' && subcategoria === 'Todas') {\n          response = await apiService.getProdutosPorCategoria(categoria, page, size);\n        } else if (subcategoria !== 'Todas') {\n          response = await apiService.getProdutosPorSubcategoria(categoria, subcategoria, page, size);\n        } else {\n          response = await apiService.getProdutosPorCategoria(categoria, page, size);\n        }\n\n        const produtosTransformados = response.content\n          .map(produto => apiService.transformProdutoData(produto))\n          .filter(produto => produto !== null); // Remove produtos null/inválidos\n\n        setProdutos(produtosTransformados);\n        setPageInfo(response.page);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produtos:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProdutos();\n  }, [categoria, subcategoria, page, size]);\n\n  return { produtos, loading, error, pageInfo };\n};\n\n// Hook para categorias\nexport const useCategorias = () => {\n  const [categorias, setCategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await apiService.getCategorias();\n        const categoriasTransformadas = response.map(categoria =>\n          apiService.transformCategoriaData(categoria)\n        );\n\n        // Adicionar categoria \"Todos\" no início\n        const categoriasComTodos = [\n          {\n            id: 0,\n            nome: 'Todos',\n            slug: 'todos',\n            descricao: 'Todos os produtos',\n            imagem: null,\n            totalProdutos: 0,\n            ativo: true\n          },\n          ...categoriasTransformadas\n        ];\n\n        setCategorias(categoriasComTodos);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar categorias:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCategorias();\n  }, []);\n\n  return { categorias, loading, error };\n};\n\n// Hook para produto individual\nexport const useProduto = (id) => {\n  const [produto, setProduto] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchProduto = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await apiService.getProdutoPorId(id);\n        const produtoTransformado = apiService.transformProdutoData(response);\n        \n        setProduto(produtoTransformado);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produto:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProduto();\n  }, [id]);\n\n  return { produto, loading, error };\n};\n\n// Hook para produtos relacionados\nexport const useProdutosRelacionados = (id) => {\n  const [produtosRelacionados, setProdutosRelacionados] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchProdutosRelacionados = async () => {\n      if (!id) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await apiService.getProdutosRelacionados(id);\n        const produtosTransformados = response.content.map(produto =>\n          apiService.transformProdutoData(produto)\n        );\n        \n        setProdutosRelacionados(produtosTransformados);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar produtos relacionados:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProdutosRelacionados();\n  }, [id]);\n\n  return { produtosRelacionados, loading, error };\n};\n\n// Hook para subcategorias\nexport const useSubcategorias = (categoriaId = null) => {\n  const [subcategorias, setSubcategorias] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchSubcategorias = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        let response;\n        if (categoriaId) {\n          response = await apiService.getSubcategoriasPorCategoria(categoriaId);\n        } else {\n          response = await apiService.getSubcategorias();\n        }\n\n        // Transformar os dados das subcategorias\n        const subcategoriasTransformadas = response.map(subcategoria => ({\n          id: subcategoria.id,\n          nome: subcategoria.nome || subcategoria.name,\n          categoria: subcategoria.categoria?.nome || subcategoria.category?.nome,\n          slug: subcategoria.slug,\n          descricao: subcategoria.descricao || subcategoria.description,\n          ativo: subcategoria.ativo !== undefined ? subcategoria.ativo : subcategoria.active\n        }));\n        \n        setSubcategorias(subcategoriasTransformadas);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao carregar subcategorias:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSubcategorias();\n  }, [categoriaId]);\n\n  return { subcategorias, loading, error };\n};\n\n// Hook genérico para refetch de dados\nexport const useRefetch = () => {\n  const [isRefetching, setIsRefetching] = useState(false);\n\n  const refetch = async (fetchFunction) => {\n    try {\n      setIsRefetching(true);\n      await fetchFunction();\n    } catch (error) {\n      console.error('Erro ao recarregar dados:', error);\n      throw error;\n    } finally {\n      setIsRefetching(false);\n    }\n  };\n\n  return { refetch, isRefetching };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}